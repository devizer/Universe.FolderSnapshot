variables:
  NUGET_VERSION: 0.1

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '**'
    exclude:
    - 'build-scripts'
    - 'Repack-Postgres-on-Linux.yml'

jobs:

- job: Test
  pool:
    vmImage: '$(IMAGE)'
  timeoutInMinutes: 60
  strategy:
    maxParallel: 3
    matrix:

      'Ubuntu 22.04':
        IMAGE: "ubuntu-22.04"
      'Windows 2022':
        IMAGE: "windows-2022"
      'Mac OS Latest':
        IMAGE: 'macos-latest'

      'RAM, Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
        TEST_RAM_DISK: /ram
      'Windows 2019':
        IMAGE: "windows-2019"
      'Mac OS 13':
        IMAGE: 'macos-13'

      'Ubuntu 20.04':
        IMAGE: "ubuntu-20.04"
      'Mac OS 11':
        IMAGE: 'macos-11'
      'RAM, Ubuntu 22.04':
        IMAGE: "ubuntu-22.04"
        TEST_RAM_DISK: /ram


  steps:

  - bash: |
       set -e
       script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
       Say --Reset-Stopwatch
       if [[ "$(uname -s)" == MINGW* || "$(uname -s)" == MSYS* ]]; then 
         uname -a
         try-and-retry curl -kfSL -o c:\\windows\\7zr.exe "https://www.7-zip.org/a/7zr.exe"
         ls -la c:\\windows\\7zr.exe
       fi
       echo "CPU: $(Get-CpuName)"
       export DOTNET_VERSIONS="5.0 6.0 7.0"
       script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; test -s /usr/share/dotnet/dotnet && sudo ln -f -s /usr/share/dotnet/dotnet /usr/local/bin/dotnet; test -s /usr/local/share/dotnet/dotnet && sudo ln -f -s /usr/local/share/dotnet/dotnet /usr/local/bin/dotnet; 
       dotnet --info
       if [[ "$(uname -s)" == Linux ]]; then sudo apt-get update -qq; sudo apt-get install lzop zstd brotli pigz -y -qq; fi
       if [[ "$(uname -s)" == Darwin ]]; then brew install pigz lzop; fi
    condition: succeededOrFailed()
    displayName: 'Bootstrap .NET SDK'

  - bash: |
      dotnet restore || dotnet restore --disable-parallel
    displayName: 'Restore'

  - bash: |
      dotnet build -c Release
    displayName: 'Build Release'

  - bash: |
      set -eu; set -o pipefail
      if [[ -n "${TEST_RAM_DISK:-}" && "$(uname -s)" == Linux ]]; then 
        Say "Assign TMPDIR to ramdisk /ram"
        sudo mkdir -p /ram;
        sudo mount -t tmpfs -o rw,mode=1777 tmpfs /ram;
        sudo chown -R $USER /ram
        export TMPDIR=/ram
      elif [[ "$(uname -s)" == Darwin || "$(uname -s)" == Linux ]]; then 
        export TMPDIR="$(pwd)/Temp Snapshots"
        mkdir -p "$TMPDIR"
      elif [[ "$(uname -s)" == MINGW* || "$(uname -s)" == MSYS* ]]; then 
        export TEMP="$(pwd)\\Temp Snapshots"
        mkdir -p "$TEMP"
      fi
      dotnet test --no-build -c Release
      # dotnet test --collect:"XPlat Code Coverage" --logger trx
    retryCountOnTaskFailure: 1
    timeoutInMinutes: 10
    displayName: '★TEST RELEASE★'

  - bash: |
      set -eu; set -o pipefail
      d=$PWD
      pushd "$(System.ARTIFACTSDIRECTORY)"
      7z a -mx=1 -ms=on -mqs=on "Source-$(Agent.JobName).7z" "$d"
      popd
    condition: succeededOrFailed()
    displayName: 'Prepare Artifacts'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(System.ARTIFACTSDIRECTORY)'
      artifactName: '$(Agent.JobName)'

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      testRunTitle: 'All the tests for $(Agent.JobName)'

  - task: PublishCodeCoverageResults@1
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: cobertura
      failIfCoverageEmpty: false # Optional      
      summaryFileLocation: '**/coverage.cobertura.xml'

  - bash: Show-System-Stat
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Linux System Statistic'

- job: Benchmark
  dependsOn: Test
  pool:
    vmImage: '$(IMAGE)'
  timeoutInMinutes: 20
  strategy:
    maxParallel: 3
    matrix:
      'vDefault on Mac OS':
        IMAGE: 'macos-12'
      'vDefault Windows 2022':
        IMAGE: 'windows-2022'
      'vDefault on Ubuntu 20.04':
        IMAGE: 'ubuntu-20.04'

  steps:

  - bash: |
       export DOTNET_VERSIONS="5.0 6.0 7.0"
       script=https://raw.githubusercontent.com/devizer/test-and-build/master/lab/install-DOTNET.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash; test -s /usr/share/dotnet/dotnet && sudo ln -f -s /usr/share/dotnet/dotnet /usr/local/bin/dotnet; test -s /usr/local/share/dotnet/dotnet && sudo ln -f -s /usr/local/share/dotnet/dotnet /usr/local/bin/dotnet; 
       dotnet --info
    condition: succeededOrFailed()
    displayName: 'Bootstrap .NET SDK'

  - bash: |
       cd Universe.FolderSnapshot.Benchmark
       dotnet run -c Release -f net6.0
    condition: succeededOrFailed()
    displayName: 'Benchmark'


